
[choi kaja~]$ psql tracker --command "select * from tasks"

or

[choi kaja~]$ psql tracker -c "select * from tasks"

 task_id |          title          | notes | context | priority | parent_id |         created_at         | completed_at
---------+-------------------------+-------+---------+----------+-----------+----------------------------+--------------
       1 | call with CTO at Alydar |       | home    |          |           | 2011-08-13 10:40:03.725077 |
(1 row)


With quries: p. 99


WITH RECURSIVE 

This selects all the subtasks (all descendants) of a particular task;

with recursive subtasks(task_id, title, parent_id) as (
  select task_id, title, parent_id from tasks where parent_id = 3
union 
  select 
    t.task_id, t.title, t.parent_id 
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
)
select * from subtasks;

Good explanation recursive queries

  http://old.storytotell.org/blog/2009/08/11/postgresql84-recursive-queries.html

Parameterize recursive CTE
http://explainextended.com/2010/12/24/postgresql-parametrizing-a-recursive-cte/

------------------------------------------------------------------------

tracker=# insert into tasks (title, parent_id) values ('find good example', 4);

compare:

UNION

with recursive subtasks(task_id, title, parent_id) as (
  select task_id, title, parent_id from tasks where parent_id = 3
union
  select
    t.task_id, t.title, t.parent_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks;

 task_id |                   title                   | parent_id
---------+-------------------------------------------+-----------
       4 | Study postgresql 'with recursive' queries |         3
       5 | Make Vim interface                        |         3
       6 | find good example                         |         4
(3 rows)


with recursive subtasks(task_id, title, parent_id) as (
  select task_id, title, parent_id from tasks where task_id = 3
union 
  select
    t.task_id, t.title, t.parent_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks;

 task_id |                   title                   | parent_id
---------+-------------------------------------------+-----------
       3 | Do Tracker project                        |
       4 | Study postgresql 'with recursive' queries |         3
       5 | Make Vim interface                        |         3
       6 | find good example                         |         4
(4 rows)


Union vs union all doesn't make a difference

We can select task_id = 4 to find a subtree.

Show depth:

with recursive subtasks(task_id, title, parent_id, depth) as (
  select task_id, title, parent_id, 0 from tasks where task_id = 3
union 
  select
    t.task_id, t.title, t.parent_id, depth+1
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks;

 task_id |                   title                   | parent_id | depth
---------+-------------------------------------------+-----------+-------
       3 | Do Tracker project                        |           |     0
       4 | Study postgresql 'with recursive' queries |         3 |     1
       5 | Make Vim interface                        |         3 |     1
       6 | find good example                         |         4 |     2
(4 rows)


------------------------------------------------------------------------

try breadcrumbs to order



with recursive subtasks(task_id, title, parent_id, depth, path) as (
  select task_id, title, parent_id, 0, '3' from tasks where task_id = 3
union
  select
    t.task_id, t.title, t.parent_id, depth+1, (path || '/' || t.task_id)
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


tracker=# \e
 task_id |                   title                   | parent_id | depth | path
---------+-------------------------------------------+-----------+-------+-------
       3 | Do Tracker project                        |           |     0 | 3
       4 | Study postgresql 'with recursive' queries |         3 |     1 | 3/4
       6 | find good example                         |         4 |     2 | 3/4/6
       5 | Make Vim interface                        |         3 |     1 | 3/5
(4 rows)

If I try to use an Array column, i get this error:

ERROR:  could not implement recursive UNION
DETAIL:  All column datatypes must be hashable.
tracker=#


tracker=# select array[1,2] a union select array[3] union select array[3,1] a order by a asc;
   a
-------
 {1,2}
 {3}
 {3,1}
(3 rows)

with recursive subtasks(task_id, title, parent_id, depth, path) as (
  select task_id, title, parent_id, 0, array[task_id]  from tasks where task_id = 3
union
  select
    t.task_id, t.title, t.parent_id, depth+1, array[t.task_id]
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


tracker=# select array[1] || 2;
 ?column?
----------
 {1,2}
(1 row)

THE KEY IS UNION ALL TO GET THE ARRAY TO WORK!
------------------------------------------------------------------------
THIS WORKS:

with recursive subtasks(task_id, title, parent_id, depth, path) as (
  select task_id, title, parent_id, 0, array[task_id]  from tasks where task_id = 3
union all
  select
    t.task_id, t.title, t.parent_id, depth+1, path || array[t.task_id]
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


------------------------------------------------------------------------
Put spaces or dashes and plus sign prefix to title depending on the 
nesting depth and also on whether it is expanded or collapsed.

with recursive subtasks(task_id, title, parent_id, depth, path) as (
  select task_id, title, parent_id, 0, array[task_id]  from tasks where task_id = 3
union all
  select
    t.task_id, lpad('', (depth+1)*2 , '..') || t.title, t.parent_id, depth+1, path || array[t.task_id]
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


 task_id |                    title                    | parent_id | depth |  path
---------+---------------------------------------------+-----------+-------+---------
       3 | Do Tracker project                          |           |     0 | {3}
       4 | ..Study postgresql 'with recursive' queries |         3 |     1 | {3,4}
       6 | ....find good example                       |         4 |     2 | {3,4,6}
       5 | ..Make Vim interface                        |         3 |     1 | {3,5}
(4 rows)

------------------------------------------------------------------------
move task_id to right

with recursive subtasks(title, parent_id, depth, path, task_id) as (
  select title, parent_id, 0, array[task_id], task_id from tasks where task_id = 3
union all
  select
    lpad('', (depth+1)*2 , '..') || t.title, t.parent_id, depth+1, path || array[t.task_id], t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


                    title                    | parent_id | depth |  path   | task_id
---------------------------------------------+-----------+-------+---------+---------
 Do Tracker project                          |           |     0 | {3}     |       3
 ..Study postgresql 'with recursive' queries |         3 |     1 | {3,4}   |       4
 ....find good example                       |         4 |     2 | {3,4,6} |       6
 ..Make Vim interface                        |         3 |     1 | {3,5}   |       5

we can parameterize by passing max depth?

------------------------------------------------------------------------
To get all tasks, just change the base case to be 'where parent_id is null'


                    title                    | parent_id | depth |  path   | task_id
---------------------------------------------+-----------+-------+---------+---------
 call with CTO at Alydar                     |           |     0 | {1}     |       1
 Call CTO of Alydar                          |           |     0 | {2}     |       2
 Do Tracker project                          |           |     0 | {3}     |       3
 ..Study postgresql 'with recursive' queries |         3 |     1 | {3,4}   |       4
 ....find good example                       |         4 |     2 | {3,4,6} |       6
 ..Make Vim interface                        |         3 |     1 | {3,5}   |       5
(6 rows)

Question: is there a way to get aggregate data of all the children of a node, e.g. total children, total undone, total to do?

Idea. for collaborative use case, we can use PostgreSQL users for access
control and also to produce any audit log.  Look up the postgres function that
identifies the current user.

For position ordering, put a decimal in the elements of the path and order by that.

------------------------------------------------------------------------

Use spaces

with recursive subtasks(title, parent_id, depth, path, task_id) as (
  select title, parent_id, 0, array[task_id], task_id from tasks where parent_id is null
union all
  select
    lpad('', (depth+1)*2 , '  ') || t.title, t.parent_id, depth+1, path || array[t.task_id], t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;

                    title                    | parent_id | depth |  path   | task_id
---------------------------------------------+-----------+-------+---------+---------
 call with CTO at Alydar                     |           |     0 | {1}     |       1
 Call CTO of Alydar                          |           |     0 | {2}     |       2
 Do Tracker project                          |           |     0 | {3}     |       3
   Study postgresql 'with recursive' queries |         3 |     1 | {3,4}   |       4
     find good example                       |         4 |     2 | {3,4,6} |       6
   Make Vim interface                        |         3 |     1 | {3,5}   |       5
(6 rows)


------------------------------------------------------------------------
Add positioning column

with recursive subtasks(title, parent_id, depth, path, task_id) as (
  select title, parent_id, 0, array[array[task_id, position]], task_id from tasks where parent_id is null
union all
  select
    lpad('', (depth+1)*2 , '  ') || t.title, t.parent_id, depth+1, path || array[t.task_id, t.position], t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


                    title                    | parent_id | depth |        path         | task_id
---------------------------------------------+-----------+-------+---------------------+---------
 call with CTO at Alydar                     |           |     0 | {{1,0}}             |       1
 Call CTO of Alydar                          |           |     0 | {{2,0}}             |       2
 Do Tracker project                          |           |     0 | {{3,0}}             |       3
   Study postgresql 'with recursive' queries |         3 |     1 | {{3,0},{4,1}}       |       4
     find good example                       |         4 |     2 | {{3,0},{4,1},{6,0}} |       6
   Make Vim interface                        |         3 |     1 | {{3,0},{5,0}}       |       5
(6 rows)


That doesn't work. reverse task_id and position, and make sure position is kept up to date

This doesn't work either

with recursive subtasks(title, parent_id, depth, position, path, task_id) as (
  select title, parent_id, 0, position, array[task_id], task_id from tasks where parent_id is null
union all
  select
    lpad('', (depth+1)*2 , '  ') || t.title, t.parent_id, depth+1, t.position, path || array[t.task_id], t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by depth, position;

                    title                    | parent_id | depth | position |  path   | task_id
---------------------------------------------+-----------+-------+----------+---------+---------
 call with CTO at Alydar                     |           |     0 |        0 | {1}     |       1
 Call CTO of Alydar                          |           |     0 |        0 | {2}     |       2
 Do Tracker project                          |           |     0 |        0 | {3}     |       3
   Make Vim interface                        |         3 |     1 |        0 | {3,5}   |       5
   Study postgresql 'with recursive' queries |         3 |     1 |        1 | {3,4}   |       4
     find good example                       |         4 |     2 |        0 | {3,4,6} |       6


------------------------------------------------------------------------
This might be it: order by path[1:depth]

with recursive subtasks(title, parent_id, depth, position, path, task_id) as (
  select title, parent_id, 0, position, array[task_id], task_id from tasks where parent_id is null
union all
  select
    lpad('', (depth+1)*2 , '  ') || t.title, t.parent_id, depth+1, t.position, path || array[t.task_id], t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path[1:depth], position;

------------------------------------------------------------------------

What if we tried a different approach.

The text file can keep the structure, and the database just keeps the row data,
instead of the relative positions. It's like the orthogonality of files and
directories.

If row data and the positioning data are separate, where is row data?

Another approach is to return the data unordered from PostgreSQL, and have Ruby order it.

This is a hard problem. 

Another idea. We can change the path to include items that order, like letters

Order by in a recusrive query is not permitted!

What if we just store the positions directly as outline numbers in an array, e.g.

{1,1,1}
{1,1,2} etc?

The downside is that reordering is burdensome.

Maybe I should stick with outlines for a while?

Maybe the ordering should just be by priority?

This is really an outliner first.

Maybe the path should be {{depth, position}}

with recursive subtasks(title, parent_id, depth, position, path, task_id) as (
  select title, parent_id, 0, position, array[array[0, position]], task_id from tasks where parent_id is null
union all
  select
    lpad('', (depth+1)*2 , '  ') || t.title, t.parent_id, depth+1, t.position, path || array[depth+1, t.position], t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;

This seems to work

                    title                    | parent_id | depth | position |        path         | task_id
---------------------------------------------+-----------+-------+----------+---------------------+---------
 Call CTO of Alydar                          |           |     0 |        0 | {{0,0}}             |       2
 Do Tracker project                          |           |     0 |        1 | {{0,1}}             |       3
   Make Vim interface                        |         3 |     1 |        0 | {{0,1},{1,0}}       |       5
   Study postgresql 'with recursive' queries |         3 |     1 |        1 | {{0,1},{1,1}}       |       4
     find good example                       |         4 |     2 |        0 | {{0,1},{1,1},{2,0}} |       6
 call with CTO at Alydar                     |           |     0 |        2 | {{0,2}}             |       1
(6 rows)

We actually don't need the depth in the path

with recursive subtasks(title, parent_id, depth, position, path, task_id) as (
  select title, parent_id, 0, position, array[position], task_id from tasks where parent_id is null
union all
  select
    lpad('', (depth+1)*2 , '  ') || t.title, t.parent_id, depth+1, t.position, path || t.position, t.task_id
  from tasks t, subtasks s
  where s.task_id  = t.parent_id
) select * from subtasks order by path;


                    title                    | parent_id | depth | position |  path   | task_id
---------------------------------------------+-----------+-------+----------+---------+---------
 Call CTO of Alydar                          |           |     0 |        0 | {0}     |       2
 Do Tracker project                          |           |     0 |        1 | {1}     |       3
   Make Vim interface                        |         3 |     1 |        0 | {1,0}   |       5
   Study postgresql 'with recursive' queries |         3 |     1 |        1 | {1,1}   |       4
     find good example                       |         4 |     2 |        0 | {1,1,0} |       6
 call with CTO at Alydar                     |           |     0 |        2 | {2}     |       1
(6 rows)

Note that depth is a derived value. And the path is built from depth.

The only arduous point is that the positions must be recalculated if a node is
moved up or down the hierarchy. But the good thing is that the ripple effect is
contained. Only the positions at the directly affected levels need be
recalculated.

------------------------------------------------------------------------

So we can make a generic outline!

This is good. This is the core proof of concept.

How about the name: THOUGHTTREE 

thought-tree

or task-tree

compete against omnifocus.

"omnifocus for power users"

outln - easy to search - sounds unixy

- see http://psoug.org/reference/outlines.html
- http://jonathanlewis.wordpress.com/2010/03/11/dropping-outln/
- seems obscure enough that the name is not taken
- the domain is available => purchased.


------------------------------------------------------------------------
Wed Oct 12 14:41:11 EDT 2011

ruby lib/outln.rb
def show

  title                                                                    | parent_id |  depth |  position | path                           |   task_id
  -------------------------------------------------------------------------+-----------+--------+-----------+--------------------------------+----------
  Call CTO of Alydar                                                       |           |      0 |         0 | {0}                            |         2
  Do Tracker project                                                       |           |      0 |         1 | {1}                            |         3
    Make Vim interface                                                     |         3 |      1 |         0 | {1,0}                          |         5
    Study postgresql 'with recursive' queries                              |         3 |      1 |         1 | {1,1}                          |         4
      find good example                                                    |         4 |      2 |         0 | {1,1,0}                        |         6
  call with CTO at Alydar                                                  |           |      0 |         2 | {2}                            |         1

Next:
- Move branch.
- Insert new branch.
- Delete branch.

Should move be Vim cut and paste?

When moving one node, all the child nodes must be moved with it. 
But I think the schema already does this automatically.
But we need to change the parent_id and the position of the moved 
node.

- First find the parent_id of the new insertion point
- Then find the new position
- Fix the change positions of the old peers?

OR, first change values as if the moving node got deleted; THEN
insert the moved node as if it were just created.

Deletion effects:
- find all current siblings
- change their position numbers to fill up 'hole'

Insertion effects:
- find all children of the parent under which insertion will take place
- create a 'hole' for their new sibling
- put node in place by setting the values for the hole (parent_id and
  position)

functions:


NOTE we need a root parent_id and not just null

function inputs
- task_id, target parent_id, target_position

  - set parent_id and position of moving node to null 
  - decrease position of lower siblings by one
    - this can be a sql question with a select

      update tasks set position = position - 1 where parent_id = ? and position > (moving_node's position)

  - for a given parent_id and target position:
  - increment the position numbers of lower siblings by one

      update tasks set position = position + 1 where parent_id = (target parent) and position >= (target position)

  - set parent_id and position of inserted node

      update tasks set position = ? and parent_id ? where task_id = ?

Turn these into plpgsql functions?
A remove function and insert function

This should be a transaction to preserve integrity

CREATE OR REPLACE FUNCTION remove_task(task_id) RETURNS NULL AS $$
BEGIN
  update tasks set position = position - 1 
  where parent_id = (select parent_id where from tasks where task_id = $1) 
    and position > (select position where from tasks where task_id = $1);
  update tasks set parent_id = null, position = null where task_id = $1;  
END $$ LANGUAGE plpgsql;


Note that
  
  Each PL/pgSQL function is automatically treated as a single
  transaction by Postgres.   As such, the entire function either
  succeeds or fails.

  To manage a transaction *inside* the PL/pgSQL function, Postgres would
  have to support nested transactions ... which we currently don't.
  Nested transactions and MVCC are somewhat of a tangle to reconcile,
  and we don't expect a solution until Postgres 8.0 (if then).


TODO
- what to do in the case of a null parent?
  The functions may work better if the top level items have parent_id of 0.


I think the best approach will be to use triggers to update the 
positions. 

- When a new task is inserted 




 vim: set nowrap:
